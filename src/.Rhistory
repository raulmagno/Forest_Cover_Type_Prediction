q()
source('~/R/RProjects/email_novidades/src/functions.R')
<<<<<<< HEAD
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
str(Wage)
names(Wage)
data(Wage)
Wage <- subset(Wage,select = -c(logwage))
summary(Wage)
inTrain <- createDataPartition( y = Wage$wage, p = 0.7, list = FALSE)
training <- Wage[inTrain,]
test <- Wage[-inTrain,]
dim(training)
dim(test)
qplot(age,wage,data = training)
names(wage)
names(Wage)
qplot(age,wage,color=jobclass,data = training)
str(Wage)
summary(wage)
summary(Wage)
summary(Wage)
qplot(age,wage,color=race,data = training)
qplot(age,wage,size=race,data = training)
qplot(age,wage,color=jobclass,data = training)
r
qplot(age,wage,color=race,data = training)
qplot(age,wage,shape=race,data = training)
qplot(age,wage,shape=race,color = education ,data = training)
qplot(age,wage,color = education ,data = training)
modFit <- train(wage ~ age + jobclass
+ education, method = "lm", data = training)
finMod <- modFit$finalModel
print(modFit)
findMod$fitted
modFit$finalModel
finMod$fitted
qplot(finMod$fitted, finMod$residual,color=race,data=training)
names(modFit)
?modFit
finMod$perfNames
finMod$metric
modFit$metric
modFit$preProcess
modFit$pred
modFit$method
modFit$xlevels
qplot(age,wage,color = education ,data = training)
qplot(finMod$fitted, finMod$residual,color=race,data=training)
qplot(finMod$fitted, finMod$residual,color=race,data=training)
qplot(dinMode$resilduals,pch=19)
qplot(dinMode$resilduals,pch=19)
inMode
qplot(finMode$resilduals,pch=19)
qplot(finMode$residuals,pch=19)
plot(finMode$residuals,pch=19)
qplot(finMod$fitted, finMod$residual,color=race,data=training)
plot(finMod$residuals,pch=19)
pred <- predict(modFit, testing)
pred <- predict(modFit, test)
qplot(wage,pred,colour = year, data = test)
qplot(wage,pred, data = test)
colour = year
qplot(wage,pred,colour = year, data = test)
modFitAll <- train(wage ~., data = training,method= "lm")
pred <- predict(modFitAll, test)
qplot(wage,pred,data=testing)
qplot(wage,pred,data=test)
# Linear model é muito util para usar junto com outros algoritimo de predição
qplot(wage,pred,colour = year, data = test)
qplot(wage,pred,data=test)
modFit <- train(wage ~ age + jobclass
+ education, method = "lm", data = training)
finMod <- modFit$finalModel
pred <- predict(modFit, test)
qplot(wage,pred,colour = year, data = test)
modFitAll <- train(wage ~., data = training,method= "lm")
pred <- predict(modFitAll, test)
qplot(wage,pred,data=test)
library(ElemStatLearn)
library(ElemStatLearn)
data(ozone,package = "ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA,nrow=10,ncol=155)
ss <- sample(1:dim(ozone)[1],replace=T)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,];
ozone0 <- ozone0[order,(order(ozone0$ozone))]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[i,] <- predict(loess0,newdata = data.frame(ozone=1:155))
}
library(ElemStatLearn)
data(ozone,package = "ElemStatLearn")
# Usando bagging vamos ter um bias parecido mas iremos reduzir bastante
#a variabilidade
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA,nrow=10,ncol=155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,];
ozone0 <- ozone0[order,(order(ozone0$ozone))]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[i,] <- predict(loess0,newdata = data.frame(ozone=1:155))
}
for(i in 1:10){
ss <- sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,];
ozone0 <- ozone0[(order(ozone0$ozone)),]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[i,] <- predict(loess0,newdata = data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
predictors = data.frame(ozone = ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$pred
predict = ctreeBag$pred
aggregate = ctreeBag$aggregate))
predictors = data.frame(ozone = ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$pred
predict = ctreeBag$pred
library(caret)
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$pred
predict = ctreeBag$pred
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
predictors = data.frame(ozone = ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
plot(ozone$ozone,temparature,col='lightgrey',pch=19)
plot(ozone$ozone,temperature,col='lightgrey',pch=19)
points(ozone$ozone,predict(trebag$fits[[1]]$fit,predictors),pch=19,col="red")
points(ozone$ozone,predict(treebag$fits[[1]]$fit,predictors),pch=19,col="red")
points(ozone$ozone,predict(treebag,predictors),pch=19,col="blue")
points(ozone$ozone,predict(treebag,predictors),pch=40,col="blue")
points(ozone$ozone,predict(treebag,predictors),pch=100,col="blue")
4
points(ozone$ozone,predict(treebag,predictors),pch=4,col="blue")
points(ozone$ozone,predict(treebag,predictors),pch=4,col="blue")
points(ozone$ozone,predict(treebag,predictors),pch=19,col="blue")
points(ozone$ozone,predict(treebag$fits[[1]]$fit,predictors),pch=19,col="red")
points(ozone$ozone,predict(treebag,predictors),pch=19,col="blue")
plot(ozone$ozone,temperature,col='lightgrey',pch=19)
points(ozone$ozone,predict(treebag$fits[[1]]$fit,predictors),pch=19,col="red")
points(ozone$ozone,predict(treebag,predictors),pch=19,col="blue")
plot(ozone$ozone,temperature,col='lightgrey',pch=19)
points(ozone$ozone,predict(treebag$fits[[1]]$fit,predictors),pch=19,col="red")
points(ozone$ozone,predict(treebag,predictors),pch=100,col="blue")
9
plot(ozone$ozone,temperature,col='lightgrey',pch=19)
points(ozone$ozone,predict(treebag$fits[[1]]$fit,predictors),pch=19,col="red")
points(ozone$ozone,predict(treebag,predictors),pch=19,col="blue")
library(ISLR)
data(Wage)
Wage <- subset(Wage,select=-c(logwage))
names(wage)
names(Wage)
inTrain <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
Wage$logwage
wage$logwage
modFit <- train(wage ~., method = "gbm", data = training, verbose = FALSE)
library(ISLR)
data(Wage)
Wage <- subset(Wage,select=-c(logwage))
inTrain <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
modFit <- train(wage ~., method = "gbm", data = training, verbose = FALSE)
data(iris)
library(ggplot2)
table(iris$Species)
inTrain <- createDataPartition(y = iris$Species, p = 0.7, list = FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(testing)
dim(training)
modnb = train(Species ~ ., data = training, method = "nb")
modlda = train(Species ~ ., data = training, method = "lda")
modnb = train(Species ~ ., data = training, method = "nb")
plinear_discriminate_analises = predict(modlda,testing)
p_naive_bayes = predict(modnb,testing)
p_linear_discriminate_analises = predict(modlda,testing)
table(p_linear_discriminate_analises,p_naive_bayes)
inTrain <- createDataPartition(y = iris$Species, p = 0.7, list = FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(testing)
dim(training)
modlda = train(Species ~ ., data = training, method = "lda")
modnb = train(Species ~ ., data = training, method = "nb")
p_linear_discriminate_analises = predict(modlda,testing)
p_naive_bayes = predict(modnb,testing)
table(p_linear_discriminate_analises,p_naive_bayes)
install.packages("ellipse")
q()
setwd("~/R/RProjects/email_novidades/src/")
library(ggplot2)
library(dplyr)
require(RSQLServer)
require(DBI)
require(mailR)
library(RMySQL)
library(XML)
=======
setwd("~/R/RProjects/email_novidades/src/")
library(ggplot2)
library(dplyr)
library(RImpala)
require(RSQLServer)
require(DBI)
>>>>>>> 250851f4b27efd0228d40e9231fa41e16fb617b3
source('db_connections.R')
source('get_data_functions.R')
source('pre_process.R')
source('pos_process.R')
source('email_novidades.R')
<<<<<<< HEAD
source('queries.R')
source('get_data_function_pre_process.R')
source('enviar_email.R')
source('pacotes_no_ar.R')
bi_connection <- GetBIConnection()
mysql_connection <- GetMysqlConnection()
email_marketing_pacotes_ofertados <- GetEmailPacotesOfertados(bi_connection)
outras_midias_pedidos_feitos_get_data <- GetTodasMidiasData(mysql_connection)
bi_connection <- GetBIConnection()
tabela_tipo_divulgador <- GetMidiasRedefinidas(bi_connection)
# Pre_Processamento
outras_midias_pedidos_feitos <- PreProcess(tabela_tipo_divulgador,outras_midias_pedidos_feitos_get_data)
# Calculo + Algoritimo
lista_novidades <- CalculaEmailNovidade(outras_midias_pedidos_feitos,email_marketing_pacotes_ofertados)
# Pos_Processamento
lista_novidades_final <- PrepararOutput(lista_novidades)
write.csv(lista_novidades_final, file = "pacotes_novidades.csv", row.names = FALSE)
envia_email(mails="thiago.ventura@hotelurbano.com.br", paste(c("Email Novidades: ", as.character(Sys.time())), collapse=" "),
"emailnovidades"
)
=======
bi_connection <- GetBIConnection()
impala_connection <- GetImpalaConnection()
email_marketing_pacotes_ofertados <- GetEmailPacotesOfertados(bi_connection)
outras_midias_pedidos_feitos_get_data <- GetTodasMidiasData()
>>>>>>> 250851f4b27efd0228d40e9231fa41e16fb617b3
