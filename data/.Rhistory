library(quantmod)
library(quantmod)
library(quantmod)
from.dat <- asDate("01/01/08", format='%m/%d/%y')
from.dat <- asDate("01/01/08", format="%m/%d/%y")
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat,to = to.dat)
getSymbols("GOOG", src="google", from = from.dat,to = to.dat)
head("GOOG")
?getSymbols
head(GOOG)
View(GOOG)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat,to = to.dat)
head(GOOG)
table(GOOG.Volume)
table(GOOG$Volume)
table(GOOG.Volume)
str(GOOG)
mGoog <- to.monthly(GOOG)
mGoog <- to.monthly(GOOG)
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
mGoog <- to.monthly(GOOG)
head(GOOG)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
mGoog <- to.monthly(GOOG)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
googleOpen <- Op(mGoog)
GOOG <- getSymbols.google("GOOG", from='2008-01-01', to = '2013-12-31', verbose= FALSE, auto.assign=FALSE)
GOOG <-(GOOG, select = -GOOG.Volume)
GOOG <- subset(GOOG, select = -GOOG.Volume)
mGoog <- to.monthly(GOOG)
ts1 <- ts(googOpen, frequency=12)
googOpen <- Op(mGoog)
ts1 <- ts(googOpen, frequency=12)
plot(ts1,xlab="Years+1", ylab="GOOG" )
plot(ts1,xlab="Years+1", ylab="GOOG" )
plot(decompose(ts1), xlab="Years=1")
plot(ts1,xlab="Years+1", ylab="GOOG" )
plot(decompose(ts1), xlab="Years=1")
ts1train <- window(ts1,start=1,end=5)
ts1test <- window(ts1,start=5,end=(7-0.01))
ts1train
plot(tsTrain)
ts1Train <- window(ts1,start=1,end=5)
ts1Test <- window(ts1,start=5,end=(7-0.01))
ts1Train
ts1Test <- window(ts1,start=5,end=(7-0.01))
ts1Train
plot(ts1Train)
lines(ma(ts1Train,order=3),col="red")
?ma
ets1 <- ets(ts1Train,model="MMM")
library(forecast)
library(forecast)
library(forecast)
lines(ma(ts1Train,order=3),col="red")
ets1 <- ets(ts1Train,model="MMM")
fcast <- forecast(ets1)
plot(fcast)
lines(ts1Test,col="red")
accuracy(fcast,ts1Test)
accuracy(fcast,ts1Test)
install.packages("caret")
install.packages("dplyr")
install.packages("lazyeval")
install.packages("dplyr")
install.packages("lazyeval")
q()
install.packages("randomForest")
install.packages("e1071")
q()
install.packages("caret")
q()
############# Forest Cover Prediction ##########
# Raul Magno
# V1 = 0.1
################################################
setwd('/home/raul/R/RProjects/Forest_Cover_Type_ Prediction/src')
library('caret')
library("dplyr")
source('pre_process_functions.R')
source('preprocess.R')
setwd('/home/raul/R/RProjects/Forest_Cover_Type_ Prediction/data')
train_data <- read.csv("train.csv", sep = ',')
test_data <- read.csv("test.csv", sep = ',')
train_data$Cover_Type <- as.factor(train_data$Cover_Type)
# training <- train_data
# testing <-  test_data
traning_standardize <- train_data
inTrain <- createDataPartition(y = traning_standardize$Cover_Type, p = 0.7, list = FALSE )
training <- traning_standardize[inTrain,]
testing <-  traning_standardize[-inTrain,]
